{# COMMENT
   TEMPLATE FOR cpp/core.h

   {{i}} 
    for variables

   {% for i in src %}
    for code blocks

   # for i in src # 
    for code blocks

INPUTS:
	gridArgs list
	blocksArgs list
	paramsLen int
	timeStep

	centrals list	
	bounds list	
	vertexs list
	namesAndNumbers
	 (only block0 value will be used)
	 
END COMMENT #}

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include <cuda.h>
#include <cuda_runtime_api.h>
#include "include/helper_cuda.h"
#include "include/userfuncs.h"

{% for gridArg in gridArgs %}
{% set ga = gridArg %}
#define D{{ga.indepVar.upper()}} {{ga.d}}
#define D{{ga.indepVar.upper()}}2 {{ga.d2}}
#define D{{ga.indepVar.upper()}}M1 {{ga.dm1}}
#define D{{ga.indepVar.upper()}}M2 {{ga.dm2}}
{% endfor %}

#define DT {{timeStep}}


{% for blockArgs in blocksArgs %}
{% set bn = blockArgs.blockNumber %}

#define Block{{bn}}CELLSIZE {{blockArgs.cellsize}}

{% set indepVars = blockArgs.indepVars %}
{% set countOfVars = len(indepVars) %}

{% for i in range(countOfVars) %}
#define Block{{bn}}Stride{{indepVars[i].upper()}} {{blockArgs.strides[i]}}
#define Block{{bn}}Count{{indepVars[i].upper()}} {{blockArgs.counts[i]}}
#define Block{{bn}}Offset{{indepVars[i].upper()}} {{blockArgs.offsets[i]}}
{% endfor %}
{% endfor %}
#define PAR_COUNT {{ paramsLen }}

//////////////////////////////////
#define COUNT_OF_FUNC {{len(namesAndNumbers[0])}}
#define BLOCK_SIZE 32


// Allocate host side tables to mirror the device side, and later, we
// fill these tables with the function pointers.  This lets us send
// the pointers to the kernel on invocation, as a method of choosing
// which function to run:
func_ptr_t h_funcArray[COUNT_OF_FUNC];


// Declare device side function pointers.  We retrieve them later with
// cudaMemcpyFromSymbol to set our function tables above in some
// particular order specified at runtime:
__device__ func_ptr_t d_funcArray[COUNT_OF_FUNC];

{% for eq in centrals %}
{% set bn = eq.blockNumber %}
{% set num = eq.number %}
//=========================CENTRAL FUNCTIONS FOR BLOCK WITH NUMBER {{bn}}========================//

//{{num}} central function for {{eq.dim}}d model for block with number {{bn}}
__device__ void {{eq.funcName}}(double* result, double** source, double t, int idxX, int idxY, int idxZ, double* params, double** ic){
	 int idx = ( idxX + idxY * Block{{bn}}StrideY + idxZ * Block{{bn}}StrideZ) * Block{{bn}}CELLSIZE;	      {% for i, value in enumerate(eq.parsedValues) %}
	{{value}};
     {% endfor %}
}

//device side function pointer declaration and init:
__device__ func_ptr_t p_{{eq.funcName}} = {{eq.funcName}};

{% endfor %}

{% for bound in bounds %}
{% set bn = bound.blockNumber %}

//=============================BOUNDARY CONDITIONS FOR BLOCK WITH NUMBER {{bn}}======================//
//Boundary condition for boundary {{bound.boundName}}
__device__ void {{bound.funcName}}(double* result, double** source, double t, int idxX, int idxY, int idxZ, double* params, double** ic){
	 int idx = ( idxX + idxY * Block{{bn}}StrideY + idxZ * Block{{bn}}StrideZ) * Block{{bn}}CELLSIZE;
     {% for i, value in enumerate(bound.parsedValues)%}
         {{value}};
     {% endfor %}
}
//device side function pointer declaration and init:
__device__ func_ptr_t p_{{bound.funcName}} = {{bound.funcName}};

{% endfor %}

{% for vertex in vertexs %}
{% set bn = vertex.blockNumber %}

//=============================VERTEXS CONDITIONS FOR BLOCK WITH NUMBER {{bn}}======================//
//Vertex condition for sides {{vertex.boundName}}
__device__ void {{vertex.funcName}}(double* result, double** source, double t, int idxX, int idxY, int idxZ, double* params, double** ic){
	 int idx = ( idxX + idxY * Block{{bn}}StrideY + idxZ * Block{{bn}}StrideZ) * Block{{bn}}CELLSIZE;
     {% for i, value in enumerate(vertex.parsedValues)%}
         {{value}};
     {% endfor %}
}
//device side function pointer declaration and init:
__device__ func_ptr_t p_{{vertex.funcName}} = {{vertex.funcName}};

{% endfor %}


// only for block 0
// Copy the pointers from the function arrays to the host side
void setup_func_arrays()
{
    // Dynamically assign the function array.
    // Copy the function pointers to their appropriate locations according to the enum
   {% for funcNumber, funcName in enumerate(namesAndNumbers[0]) %}
    checkCudaErrors(cudaMemcpyFromSymbol(&h_funcArray[{{funcNumber}}], p_{{funcName}}, sizeof(func_ptr_t)));
   {% endfor %}
   
    // now copy the function arrays back to the device, so if we wish we can use an index into the array to choose them
    // We have now set the order in the function array according to our enum.
    checkCudaErrors(cudaMemcpyToSymbol(d_funcArray, h_funcArray, sizeof(func_ptr_t)*COUNT_OF_FUNC));

}

// device side function pointer declaretion:
__device__ func_ptr_t  device_func;


__global__ void kernel(int *  funcIdxs,
	   	       double* result, double** source, double* params, double** ic)
{
  int idxX = blockDim.x*blockIdx.x+threadIdx.x;
  int idxY = blockDim.y*blockIdx.y+threadIdx.y;
  
  if(idxX < Block0CountX)
  if(idxY < Block0CountY)
  {
     int idx = ( idxX + idxY * Block0StrideY ) * Block0CELLSIZE;  // + idxZ * Block0StrideZ
  
     device_func =  d_funcArray[funcIdxs[idx]];
     (*device_func)(result, source, 0.0, idxX, idxY, 0, params, ic);
  }

/*
  // for debug
  int idx = ( idxX + idxY * Block0StrideY ) * Block0CELLSIZE;  // + idxZ * Block0StrideZ
  result[idx + 0] = (2 * source[0][idx + 0 * Block0StrideY * Block0CELLSIZE + 0]);
  result[idx] = idx;
  result[idx] = funcIdxs[idx];
*/
/*
  // for debug with Block0CELLSIZE = 3;

  int idx = ( idxX + idxY * Block0StrideY ) * Block0CELLSIZE;
  result[idx] = idx;
  result[idx+1] = idx;
  result[idx+2] = idx;
*/  
}


extern "C" {
void compute_for_ctype(int *  funcIdxs,
     	               double* result, double** source, double* params, double** ic,
	    	       int SIZE_OF_RESULT, int COUNT_OF_DELAYS, int COUNT_OF_PARAMS,
		       int ITERATION_COUNT)
{

    //int SIZE = Block0CELLSIZE*Block0CountX*Block0CountY;
  
    double* d_result;

    // make device memory:
    checkCudaErrors(cudaMalloc( (void**)&d_result, SIZE_OF_RESULT * sizeof(double)));

    // FOR pointers at device side
    double** h_source;
    double ** d_source;

    // pointers at host side:
    h_source = (double**)malloc(COUNT_OF_DELAYS*sizeof(double*));

    // pointers at device side:
    checkCudaErrors(cudaMalloc( (void**)&d_source, COUNT_OF_DELAYS * sizeof(double*)));

    for(int i=0; i<COUNT_OF_DELAYS; i++)
    {
       // pointers at host side, memory at device side:
       checkCudaErrors(cudaMalloc((void**)&h_source[i], SIZE_OF_RESULT * sizeof(double)));
       checkCudaErrors(cudaMemcpy(h_source[i], source[i], SIZE_OF_RESULT * sizeof(double),
       			          cudaMemcpyHostToDevice));
    }
    // copy pointers from host side to device side:
    checkCudaErrors(cudaMemcpy(d_source, h_source, COUNT_OF_DELAYS * sizeof(double*),
    			       cudaMemcpyHostToDevice));
   // END FOR 
    
    double* d_params;

    checkCudaErrors(cudaMalloc( (void**)&d_params, COUNT_OF_PARAMS * sizeof(double)));    
    checkCudaErrors(cudaMemcpy(d_params, params, COUNT_OF_PARAMS * sizeof(double), cudaMemcpyHostToDevice));
    
    // interconnect dont used now:
    double** d_ic;
    checkCudaErrors(cudaMalloc((void**)&d_ic, 1 * sizeof(double*)));    

    int * d_funcIdxs;
    checkCudaErrors(cudaMalloc( (void**)&d_funcIdxs, SIZE_OF_RESULT * sizeof(int)));    
    checkCudaErrors(cudaMemcpy(d_funcIdxs, funcIdxs, SIZE_OF_RESULT * sizeof(int), cudaMemcpyHostToDevice));
    
    // fill funcArrays at device
    setup_func_arrays();

    // make grid:    
    //dim3 threads (Block0CountX, Block0CountY);
    //dim3 blocks  (1, 1);

    dim3 threads ( BLOCK_SIZE, BLOCK_SIZE );
    dim3 blocks  ( (int)ceil((double)Block0CountX / threads.x),
    	 	   (int)ceil((double)Block0CountY / threads.y) );
/*
    printf("\n*source \n");
    for (int i=0;i<SIZE_OF_RESULT;i++)
      printf(" %f ; ", (*source)[i]);
    printf("\nend of *source \n");

    printf("\nresult \n");
    for (int i=0;i<SIZE_OF_RESULT;i++)
      printf(" %f ; ", (result)[i]);
    printf("\nend of result \n");

    printf("\nstart kernel circle\n");
*/  
    // main code:

    for(int  i = 0; i < ITERATION_COUNT; i++) {

        kernel <<< blocks, threads >>> (d_funcIdxs,
	   	                        d_result, d_source, d_params, d_ic);
	/*
	// general scheme without delays:				    
        double * tmp = *d_source;
        *d_source = d_result;
        d_result = tmp;
	*/	


        // FOR exchange source and result:

        // h_source is host array with device pointers:
        double * tmp = *h_source;
        // printf("\n * tmp = *d_source; \n");

        //make changes at host side:
        *h_source = d_result;
        // make changes at device side (transfer pointers at device side from host):
        checkCudaErrors(cudaMemcpy(d_source, h_source, COUNT_OF_DELAYS * sizeof(double*),
    	   		           cudaMemcpyHostToDevice));
        /// printf("\n *d_source = d_result \n");

        d_result = tmp;
        /// printf("\n end of exchange \n");
        // END FOR

    }

/*
    kernel <<< blocks, threads >>> (d_funcIdxs,
     	   	                    d_result, d_source, d_params, d_ic);
    printf("\n end kernel  circle\n");


    double * tmp = *h_source;
    printf("\n * tmp = *d_source; \n");
    *h_source = d_result;
    //                                   distenation  source
    //checkCudaErrors(cudaMemcpyFromSymbol(tmp, d_source, sizeof(double*)));

    //                                   symbol   source
    //checkCudaErrors(cudaMemcpyToSymbol(d_array, h_array, sizeof(double*)*1));

    checkCudaErrors(cudaMemcpy(d_source, h_source, COUNT_OF_DELAYS * sizeof(double*),
    			       cudaMemcpyHostToDevice));

    printf("\n *d_source = d_result \n");
    d_result = tmp;
    printf("\n end of exchange \n");
*/
	
    // get result:
    cudaMemcpy(result, d_result, SIZE_OF_RESULT * sizeof(double), cudaMemcpyDeviceToHost);
    cudaMemcpy(*source, *h_source, SIZE_OF_RESULT * sizeof(double), cudaMemcpyDeviceToHost);


    printf("\nresult \n");
    for (int i=0;i<30;i++)
      printf(" %f ; ", (result)[i]);
    printf("\nend of result \n");

    printf("\n*source \n");
    for (int i=0;i<30;i++)
      printf(" %f ; ", (*source)[i]);
    printf("\nend of *source \n");

    printf("\nresult \n");
    for (int i=0;i<30;i++)
      printf(" %f ; ", (result)[i]);
    printf("\nend of result \n");

    printf("\n end get result \n");


    // FOR free
    cudaFree(d_result);

    for(int i=0; i<COUNT_OF_DELAYS; i++)
    {
       // pointers at host side, memory at device side:
       cudaFree(h_source[i]);
    }
    free(h_source);
    cudaFree(d_source);

    cudaFree(d_params);
    cudaFree(d_ic);
    cudaFree(d_funcIdxs);
    cudaFree(d_funcArray);
    cudaFree(h_funcArray);
}
}

// for tests: when main used directly.
// not forget about PAR_COUNT = 4 and change indexes for each side in
// fill_func_idxs  for that case

//===================INITIAL CONDITIONS==========================//
void Initial0(double* cellstart, double x, double y, double z){
     
	cellstart[0] = 4.0;
     
}

void Block0FillInitialValues(double* result){
    for(int idxY = 0; idxY<Block0CountY; idxY++)
		for(int idxX = 0; idxX<Block0CountX; idxX++){
			int idx = idxY*Block0CountX + idxX;
			Initial0(result+idx*Block0CELLSIZE, Block0OffsetX + idxX*DX, Block0OffsetY + idxY*DY, 0);
    }
    
}


//===================PARAMETERS==========================//
void initDefaultParams(double** pparams, int* pparamscount){

	*pparamscount = PAR_COUNT;

	*pparams = (double *) malloc(sizeof(double)*PAR_COUNT);
     
	(*pparams)[0] = 1.0;
     
	(*pparams)[1] = 0.3;
     
	(*pparams)[2] = 0.1;
     
	(*pparams)[3] = 0.01;
     
}
void releaseParams(double *params){
	free(params);
}

void fill_func_idxs(int* funcIdxs){ 
    for(int idxY = 0; idxY<Block0CountY; idxY++)
		for(int idxX = 0; idxX<Block0CountX; idxX++){
		  int idx = idxY*Block0CountX + idxX;

		  // default
		  funcIdxs[idx] = 0;
		  
		  // bounds
		  // side 0
		  if (idxX == 0)
		    funcIdxs[idx] = 16;

		  // side 1
		  if (idxX == Block0CountX-1)
		    funcIdxs[idx] = 16;

		  // side 2
		  if (idxY == 0)
		    funcIdxs[idx] = 16;

		  // side 3
		  if (idxY == Block0CountY-1)
		    funcIdxs[idx] = 16;
		 
		  // vertex
		  // [0, 2]
		  if (idxY == 0 & idxX == 0)
		    funcIdxs[idx] = 16;

		  // [2, 1]
		  if (idxY == 0 & idxX == Block0CountX-1)
		    funcIdxs[idx] = 16;
		  
		  // [3, 1]
		  if (idxY == Block0CountY-1 & idxX == Block0CountX-1)
		    funcIdxs[idx] = 16;

		  // [3, 0]
		  if (idxY == Block0CountY-1 & idxX == 0)
		    funcIdxs[idx] = 16;
		  
		  
		}
}


int main(int argc, char **argv)
{
  // size of source and result:
  int SIZE_OF_RESULT = Block0CELLSIZE*Block0CountX*Block0CountY;
  int COUNT_OF_DELAYS = 1;
  int COUNT_OF_PARAMS = PAR_COUNT;
  // count of iteration:
  int ITERATION_COUNT = 4;

  double * result = (double *)malloc(SIZE_OF_RESULT*sizeof(double));
  
  //double ** source = (double *)malloc(ITERS*sizeof(double*));
  double ** source = (double **)malloc(COUNT_OF_DELAYS*sizeof(double*));
  *source = (double *)malloc(SIZE_OF_RESULT*sizeof(double));

  double ** ic;
  ic = (double **)malloc(COUNT_OF_DELAYS*sizeof(double*));

  // FOR params
  double *  params;// = (double *) malloc(sizeof(double)*PAR_COUNT);
  int paramscount = 0;
  initDefaultParams(&params, &paramscount);
  printf("\n paramscount %d \n", paramscount);
  // END FOR

  // FOR funcIdxs:
  int *  funcIdxs = (int *)malloc(SIZE_OF_RESULT*sizeof(int));
  fill_func_idxs(funcIdxs);
  
  /*
  printf("\nfuncIdxs\n");
  for (int i=0;i<SIZE_OF_fARRAY;i++)
    printf(" %d ; ", funcIdxs[i]);
  printf("\n end of funcIdxs\n");
  */
  // END FOR

  // main code:
  Block0FillInitialValues(*source);
 
 /*
  printf("\ninitial values \n");
  for (int i=0;i<SIZE_OF_RESULT;i++)
    printf(" %f ; ", (*source)[i]);
  printf("\nend of initial values \n");
  */

  compute_for_ctype(funcIdxs, result, source, params, ic,
		    SIZE_OF_RESULT, COUNT_OF_DELAYS, COUNT_OF_PARAMS,
		    ITERATION_COUNT);
  
 
  printf("\nresult \n");
  for (int i=0;i<10;i++)
    printf(" %f ; ", (result)[i]);
  printf("\nend of result \n");
 
  printf("\n*source \n");
  for (int i=0;i<10;i++)
    printf(" %f ; ", (*source)[i]);
  printf("\nend of *source \n");
 
  // free memory:
  free(result);
  free(*source);
  free(source);
  releaseParams(params);
  //releaseFuncArray(funcArray);
  free(funcIdxs);
  free(ic);
}

